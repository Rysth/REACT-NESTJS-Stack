services:
  client:
    build: ./client
    container_name: react-client
    ports:
      - "5173:5173"
    volumes:
      - ./client:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
      - VITE_API_URL=${VITE_API_URL}
    depends_on:
      - server
    networks:
      - app_name_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.client.rule=Host(`frontend.example.com`)"
      - "traefik.http.routers.client.tls=true"
      - "traefik.http.routers.client.tls.certresolver=letsencrypt"
      - "traefik.http.services.client.loadbalancer.server.port=5173"

  server:
    build: ./server
    container_name: nest-api
    ports:
      - "3000:3000"
    environment:
      - PORT=3000
      - NODE_ENV=production
      - FRONTEND_URL=${FRONTEND_URL}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - app_name_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.server.rule=Host(`api-frontend.example.com`)"
      - "traefik.http.routers.server.tls=true"
      - "traefik.http.routers.server.tls.certresolver=letsencrypt"
      - "traefik.http.services.server.loadbalancer.server.port=3000"

  postgres:
    image: postgres:16-alpine
    container_name: postgres-db
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - app_name_network

  redis:
    image: redis:7-alpine
    container_name: redis-db
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app_name_network

  # sidekiq-worker removed (Rails-specific)

volumes:
  postgres_data:
  redis_data:
networks:
  app_name_network:
    driver: bridge
